---
Title: vim 命令
Date: 2019-01-15
Author: bugnofree
---

- vim 最小配置原则

    ~/.vim/vimrc 中写入如下配置

        " 编码
        set encoding=utf-8
        set fileencoding=utf-8
        set fileencodings=ucs-bom,utf-8,gbk,cp936
        set tenc=utf-8
        set fileformat=unix
        set fileformats=unix,dos,mac
        " 显示行号
        set number
        " 语法高亮
        syntax on
        " 设置粘贴模式
        set paste
        " tab 以空格替换
        set expandtab
        " 一个 tab 的空格数目
        set tabstop=4
        " 缩进长度
        set shiftwidth=4
        " \cd 切换到当前文件路径
        noremap <leader>cd :lcd %:p:h <cr>

- 执行选中的文本

    选中一段文本, 然后按下 y 复制.

    再执行 `:@"` 即可执行.

- vim command line window/cmdline-window

    在 ex 模式下我们会执行很多命令, 要查看这些历史命令, 我们可以在 normal 模式下,
    输入 `q:` 然后就进入到了一种 `[Command Line]` 的模式.

    在这种模式下, 可以编辑修改历史命令, 也可以复制粘贴命令.

    可以按下 <c-w>,c 退出.

- vim diff

    同时打开多个文件进行对比

        gvim -d f1.c f2.c f3.c

    也可以在已经打开的一个文件里面执行 :vert diffsplit <anohter file> 来添加要对比的文件.

- vim 终端/term

    vim 8.1 引入了终端功能. 即能在 vim 中划分出一个命令行窗口,
    十分方便运行命令.

    将当期窗口划分为两个窗口, above 表示终端在上面的窗口,
    below 表示终端在下面的窗口.

        :above term
        :below term

    将当期终端窗口放在最上面或者最下面.

        :bot term
        :top term

    打开一个终端后, 默认是插入模式, 可以输入命令并执行.

    如果要进入 normal 模式, 输入 <c-\> <c-n>.

    要进入插入模式, 直接按下 i 即可.


- 打开光标下的文件

    假如说你有一个文件 about.txt, 当你把光标放到当前字符串 `about.txt` 中的任意一个位置时,
    按下 `gf` 即可在当前窗口打开该文件.

    这个命令很有用, 总结一下(以下均是把鼠标放在文件名称处进行的操作)

    - gf: 在当前窗口打开该文件, 当你想跳回原文件时, 使用 `b #`
    - <c-w>gf: 在新的 tab 中打开该文件
    - <c-w>f: 水平划分打开该文件

    没有垂直划分打开文件的操作, 但是等价的, 你可以先 `:vsp`, 然后再 `gf`.

- 输入 unicode 字符

    在插入模式下, 按下 ctrl+v, 然后以下三种方式任选其一

    - 按下 x, 然后输入一个十六进制数值
    - 按下 u, 然后输入 4 个十六进制字符序列
    - 按下 U, 然后输入 8 个十六进制字符序列


- exec vs call

    exec 将一个字符串当做命令执行, 而 call 则是调用一个函数.

- 替换语法

        :[range]s/from/to/[flags]

    注意需要转义的字符

        *./\[]&

- 窗口大小调整
    以下 res 代表 resize
    - :res +10 水平方向增加10行
    - :vertical res +10 垂直方向增加10行

- 强制以root权限保存
        :w !sudo tee %

- vim命令行无法显示输入中文

    打开 ~/.bashrc 或者 ~/.zshrc,在最后加入以下配置:
        export LC_ALL=en_US.UTF-8
        export LANG=en_US.UTF-8
    更新一下系统对中文的语言支持, 在 Ubuntu 中可以通过 Dash 输入 Language 来打开语言支持界面

- vim 粘贴不全

    在控制台打开后用鼠标右键选择粘贴时开头的几个字符会缺失
    需要首先进入插入模式,然后鼠标右键粘贴即可解决这个问题

- 一些容易忘记的快捷键
    - 窗口间游走
            Ctrl + w + h: 向左移动窗口
            Ctrl + w + j: 向下移动窗口
            Ctrl + w + j: 向上移动窗口
            Ctrl + w + l: 向右移动窗口
            Ctrl + w + w: 这个命令会在所有窗口中循环移动
            Ctrl + w + t: 移动到最左上角的窗口
            Ctrl + w + b: 移动到最右下角的窗口
            Ctrl + w + p: 移动到前一个访问的窗口
    - 移动窗口
        vim默认交换当前窗口的
        与它下一个窗口的位置,如果下方没有窗口,则试着与上一个窗口交换位置.
        亦可在此命令前加上数量,与制定的窗口交换位置.
        - Ctrl + w + r: 向右或向下方交换窗口，而Ctrl + w + R则和它方向相反。
        - Ctrl + w + x: 交换同列或同行的窗口的位置.

- vim 内置的 ins-completion 相关补全快捷键
    - 整行 <C-X><C-L>
    - 文件名 <C-X><C-F>
    - 当前文件中的关键字 <C-X><C-P>或<C-X><C-N>
    - 关键字 <C-N>或<C-P> <C-N>、<C-P>跟<C-X><C-N>、<C-X><C-P>类似,
        但是查找范围更广，不局限于当前文件。

- 系统剪贴板粘贴到 vim 命令行上

     输入冒号(:),定位到命令行,然后 Ctrl + R 然后再按下 +

- 插入行号

    将 src=...的形式替换为 srcXX=...
        src00=http\://mirrors.neusoft.edu.cn/android/repository/addon-6.xml
        src01=http\://mirrors.neusoft.edu.cn/android/repository/addon.xml
        src02=http\://mirrors.neusoft.edu.cn/android/repository/extras/intel/addon.xml
        src03=http\://mirrors.neusoft.edu.cn/android/repository/sys-img/android-tv/sys-img.xml
        src04=http\://mirrors.neusoft.edu.cn/android/repository/sys-img/android-wear/sys-img.xml
        src05=http\://mirrors.neusoft.edu.cn/android/repository/sys-img/android/sys-img.xml
        src06=http\://mirrors.neusoft.edu.cn/android/repository/sys-img/google_apis/sys-img.xml
        src07=http\://mirrors.neusoft.edu.cn/android/repository/sys-img/x86/addon-x86.xml
        src08=http\://mirrors.neusoft.edu.cn/android/repository/addons_list-2.xml
        src09=http\://mirrors.neusoft.edu.cn/android/repository/repository-10.xml
    先 shift+v 行选择模式选中上述所有行,然后执行如下命令:
        '<,'>s/=/\=printf('%02d=',line('.')-line("'<"))/
    这个命令的主要限制是,得有一些特定的模式需要被替换.

- 以root权限写入文件
        :w !sudo tee %

- 远程打开 vim

    有时候我们已经打开了 vim,然后希望从 shell 的命令行中新打开一个文件,
    这个新打开的文件我们仍希望处于已有的 vim实例中.

    怎么做呢? 有以下几种方法,添加到 ~/.bashrc 中即可:

        vimbin=gvim
        alias gvimtab="$vimbin --remote-tab"
        alias gvimcsp="$vimbin --remote +split"
        alias gvimcvsp="$vimbin --remote +vsplit"
        gvimsp()
        {
            if [[ $# == 1 ]]
            then
                filepath=$(realpath $1)
                $vimbin --remote-send  ":split ${filepath}<CR>"
            else
                $vimbin --remote-send  ":split<CR>"
            fi
        }
        gvimvsp()
        {
            if [[ $# == 1 ]]
            then
                filepath=$(realpath $1)
                $vimbin --remote-send  ":vsplit ${filepath}<CR>"
            else
                $vimbin --remote-send  ":vsplit<CR>"
            fi
        }
        gvims()
        {
            if [[ -f $HOME/.session.vim ]]
            then
                gvim -S $HOME/.session.vim
            else
                gvim
            fi
        }

    注意, filepath 不要写成 fpath, 因为 zsh 默认的自动补全里面有一个 fpath 变量.

    mac 下面默认没有 realpath 等工具, 安装 brew install coreutils 即可.

- xxd 编辑二进制文件应注意的问题

    通常地我会在 vim 中打开一个二进制文件,然后使用 `:%!xxd -g 1` 来将其转换为
    十六进制模式. 但是 vim 会根据 .vimrc 中的 fileencoding 设置对文件内容进行解释,
    当无法解释文件内容时就会显示成 0x3f 也就是问号(?).

    这样我们看的时候就会发现有许多地方不对. 怎么解决呢?方法有两个:

    - 注释掉set fileencodings设置
    - 重新开一个 vim 指定 -b 选项(binary):gvim -b xxx

    这样的话,再使用 %!xxd 来查看即可.
    通常地我们使用 fileencodings 来让 vim 正确编码,
    所以后一种是比较好的选择.

- vim 命令行执行结果重定向到 vim

        :r !ls -la

- 顺畅的跳转到文件的某处

    normal 模式下直接输入 {count}% 即可, 比如要跳转到 50%,直接输入 50% 即可.

- 搜索

    我们使用 '/' 来进行搜索时默认是大小写不敏感的

    /pattern\C :大小写敏感

    /pattern\c :大小写不敏感

-  美化(格式化) json 文件
        :%!python -m json.tool
    其中 % 表示应用到整个文件, -m 告诉 python 将某个库作为脚本运行
    但是对于 unicode 字符则会显示 \uxxxx,解决方法为在 ~/.vimrc 中加入如下命令:
        command! JsonFormat :execute '%!python -m json.tool'
        \ | :execute '%!python -c "import re,sys;chr=__builtins__.__dict__.get(\"unichr\", chr);sys.stdout.write(re.sub(r\"\\\\u[0-9a-f]{4}\", lambda x: chr(int(\"0x\" + x.group(0)[2:], 16)).encode(\"utf-8\"), sys.stdin.read()))"'
        \ | :set ft=javascript
        \ | :1
    然后执行 :JsonFormat 即可.

    参考 @[https://qiita.com/tomoemon/items/cc29b414a63e08cd4f89]

- mapleader

    缺省的 <leader> 是 '\', 可以使用 `let mapleader = ","` 来修改 \ 为 `,`,
    不过我保持默认设置.

- 关于 vim 中的快捷键自定义 map

    默认的 :map 操作是递归的, 而 :noremap 则是非递归的,什么意思呢?
    比如

        :map j gg
        :map Q j
        :noremap W j

    那么 Q 将会被映射为 gg,因为 j 被映射为 gg 了.而 W 只会被映射为 j.

    map 的语法格式如下:

        {cmd} {attr} {lhs} {rhs}

    其中:{cmd} 属于下列命令之一
        ':map', ':map!', ':nmap', ':vmap', ':imap', :cmap', ':smap', ':xmap', ':omap', ':lmap'
    - {attr} 是可选的,属于下列之一或多个
            <buffer>, <silent>,<expr> <script>, <unique> 和 <special>.
        <silent> 属性指明执行命令时不在命令行上进行回显
    - {lhs} 左侧序列值,是你要定义的快捷方式
    - {rhs} 右侧序列值,是具体执行快捷方式所对应的 vim 命令

    当我们做映射的时候, 会用到许多特殊按键, vim 中的特殊按键可以参考 :h key-notation 来查看.

    这里列出几种常见的

        Shift: <S-?>,比如 Shift+s : <S-s>
        Ctrl:  <C-?>,比如 Ctrl+s  : <C-s>
        Alt :  <A-?> 或者 <M-?>, 比如 Alt+s  : <A-s>
        F1~F12 : <F1> 到 <F12>
        回车:    <CR> 或者 <Enter> 或者 <Return>
        空格:    <Space>
        Esc:     <Esc>

    这里注意对于普通字母的大小写问题.

    比如你想使用 alt+shift+p 来触发某个动作, 那么你可以写成
    <A-P> 或者 <A-S-p>.

    但是如过你想使用 alt+shift+] 来触发某个动作,
    你可能会写成 <A-S-]>, 但是这个动作并不会被触发,
    因为 shift + ] 触发后, vim 看到的是符号 `}` 而非 `]`.

    为了达到 alt+shift+] 的效果, 你可以写成 <A-}>.

    在 vim 中不同的映射作用于不同的模式(:help map-overview).

- 字符选取
    - 选择一个单引号内的内容,vi',选择一个双引号内的内容,vi"
    - 选择一个圆括号中的内容,vib,选择一个花括号中的内容,viB
    - 如果想包含单引号,双引号等可以将 i 替换为 a.
    更多请参考 :h text-objects

- <200b> <200e> Unicode 字符
        :%s/<c-v>u200b//g

- 删除模式
    d/while:模式删除,也就是说从当前位置删除到 while 单词处(不包括 while)

- evince 无法正确显示所有页面(pdf/evince):
        rm -rf $HOME/.local/share/gvfs-metadata/

- 文件格式和编码
        set ff=[unix|dos]
        ser fenc=<encoding-names>
    - 文件格式 :h ff
    - 文件编码 :h encoding-names

- 在 vim 中打开光标下的文件, 按下 gf 即可

- put 命令

    格式==> :[line]pu[t] [x]

    在行 line 处放入寄存器 x 中的内容, 一个等号(=),在其后面跟着一个表达式.
    其中字符竖线(|)和双引号(")需要转义.
    使用 put 生成一个自增序列
        :put =range(11,15)
        :0put =range(11,15)
        :123put =range(11,15)
        " 注意下面使用两个单引号来来表示双引号, v:val 用于获取 list 中的每一个
        " 元素值, v:key 用于获取字典的键
        :put =map(range(1,150), 'printf(''%04d'', v:val)')
        :for i in range(1,10) | put ='192.168.0.'.i | endfor
    在 vim8 以上版本:
        my_array[0] = 0;
        my_array[0] = 0;
        my_array[0] = 0;
        my_array[0] = 0;
        my_array[0] = 0;
        my_array[0] = 0;
        my_array[0] = 0;
    使用块模式选中数组中的一列 0, 然后按下g <C-a> 即可自增所有数字,如下
        my_array[1] = 0;
        my_array[2] = 0;
        my_array[3] = 0;
        my_array[4] = 0;
        my_array[5] = 0;
        my_array[6] = 0;
        my_array[7] = 0;

- quickfix
    - 关闭窗口  :ccl[ose]
    - 打开窗口  :cope[n]
    - 下一个    :cn[ext]
    - 前一个    :cp[revious]
    - 列出所有  :cl[ist]

- 显示单词个数
        %s/pattern//gn
    关键为最末的n,只显示匹配数目,不真正的匹配替换.

- bro
    :bro {command} 打开一个对话框, 选择文件, command 支持如下命令
        |:wall|, |:wq|, |:wqall|, |:x|, |:xall|, |:exit|,
        |:view|, |:sview|, |:r|, |:saveas|, |:sp|, |:mkexrc|,
        |:mkvimrc|, |:mksession|, |:mkview|, |:split|,
        |:vsplit|, |:tabe|, |:tabnew|, |:cfile|, |:cgetfile|,
        |:caddfile|, |:lfile|, |:lgetfile|, |:laddfile|,
        |:diffsplit|, |:diffpatch|, |:open|, |:pedit|,
        |:redir|, |:source|, |:update|, |:visual|, |:vsplit|,

- `g;` 和 `g,` 可以在整个 changelist 里面来回跳转，敲 :help changelist 可以看说明。

- 行排序 :sort r /regex/

- 替换搜索

    只替换 visual 选中的部分, 使用 %V 原子指明, 如下替换 us 为 az.

        :s/\%Vus/az/g

- 替换空行

        :g/^\s*$/d
