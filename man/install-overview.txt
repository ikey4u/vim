---
Title: VIM 安装配置说明
Date: 2019-01-15
Author: bugnofree
---

Windows 用户出门右拐参见 @[./install-windows.txt] 或 @[http://ahageek.com/writer/special/vim/install-windows]

Linux, Mac 用户请继续往下看, 下面是你们的时间.

# 编译环境配置

## python 配置

- 检查 python3, pip3, python3-config, python3 主目录

    命令行运行下面的命令检测是否能执行

        pip3 --version
        python3 -c "import sys; print(sys.executable)"
        python3-config --prefix

    上述命令应能正确执行, 且输出为同一个 python3 版本,
    比如下面的就是一个正确的样例输出:

        ➜   pip3 --version
        pip 9.0.1 from /Users/bugnofree/.pyenv/versions/3.6.0/lib/python3.6/site-packages (python 3.6)
        ➜   python3 -c "import sys; print(sys.executable)"
        /Users/bugnofree/.pyenv/versions/3.6.0/bin/python3
        ➜   python3-config --prefix
        /Users/bugnofree/.pyenv/versions/3.6.0

    确定 python3 程序的路径后, 再确定 python3 的主目录,
    由 `python3-config --prefix` 命令输出的即为主目录, 该目录结构如下

        ├── bin/
        ├── include/
        ├── lib/
        └── share/

- 检查 python3 是否是动态链接编译生成的

    这个可以通过查看 python3 主目录下的 lib 中是否有 .dylib, .dll 或者 .so 文件,
    如果有的话说明是动态链接编译的.

- 检查 vim 链接的 python 3 库

    - 如果已经安装了 vim

        应该保证 vim 链接的 python3 动态库和上述 python3 动态库版本一致.

        通过 vim --version, 或者打开 vim 输入 `:version` 来查看链接信息,
        比如如下样例输出:

            -L/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/config-3.7m-darwin
            -lpython3.7m -framework CoreFoundation

        这说明编译 vim 时使用的链接库是 python3.7.

        如果 vim 链接的 python3 库和命令行运行的 python3 版本不一致,
        则会导致如下错误

            Fatal Python error: PyThreadState_Get: no current thread

        如果没有经验, 此错误或许会带你走向穷途末路.

    - 未安装 vim, 此时应保证前面的步骤已经正确完成,
        即 python3 和 pip3 已经准备就绪, 然后就可以编译安装了.

        - Ubuntu @[./install-linux.txt] 或 @[http://ahageek.com/writer/special/vim/install-linux]
        - MacOS @[./install-mac.txt] 或@[http://ahageek.com/writer/special/vim/install-mac]

# 配置 vim

- 配置字体
    - macos
        执行下面的命令安装字体
            brew tap caskroom/fonts && brew cask install font-source-code-pro
            git clone https://github.com/powerline/fonts.git --depth=1
            cd fonts
            ./install.sh
            cd ..
            rm -rf fonts
    - ubuntu
        执行下面的命令安装字体
            git clone --depth 1 --branch release https://github.com/adobe-fonts/source-code-pro.git ~/.fonts/adobe-fonts/source-code-pro
            fc-cache -f -v ~/.fonts/adobe-fonts/source-code-pro

- 安装配置文件

    - 下载

            git clone https://github.com/ikey4u/vim.git ~/.vim

    - 编辑配置文件

        打开 `~/.vim/vimrc` 配置自定义变量.

    - 打开 vim, 执行如下命令

            :PlugInstall

    - 依赖安装

        - deoplete.vim 补全依赖
                python3 -m pip install neovim
        - ycm 补全依赖
                cd $HOME/.vim/plugged/YouCompleteMe/
                python3 install.py --clang-completer --java-completer --go-completer --rust-completer
            注意, 这里的 completer 仅当你安装了对应的编译器, 比如 go, 那么go-completer 才会正确安装.
            如果没有这样的编译器, 去掉对应的选项即可.

# 代码补全的依赖(ycm)

重新打开 vim, 输入 `:YcmDebugInfo` 如果没有错, 则恭喜你成功安装.

ycm 自动补全可以使用 c-z 强制触发.

如果报错了, 没关系, 参见 @[./install-ycm.txt]

# 阅读源码需要配置的依赖

- ctags

    安装 cmake 之后, 执行如下命令编译 ctags, 程序前缀设置为 ex

        git clone https://github.com/universal-ctags/ctags.git
        cd ctags/
        ./autogen.sh
        ./configure --prefix=/usr/local/ --program-prefix=ex
        make && sudo make install

    - 生成 tags
            exctags -R *
    - 使用方法
        - `ctrl+]` 到定义处
        - `ctrl+t` 返回原位置
        - `ctrl+w+]` 在新窗口打开定义
    - 其他

        ctags 并不会自动更新,如何自动更新呢?

        安装 autotags.vim 插件, 然后在 .vimrc 中加入如下选项
            let g:autotagCtagsCmd="exctags"
            let g:autotagTagsFile="tags"

- GNU Global

        wget http://tamacom.com/global/global-6.6.2.tar.gz
        tar zxvf global-6.6.2.tar.gz
        cd global-6.6.2
        ./configure --with-universal-ctags=/usr/local/bin/exctags
        make && sudo make install

    - 生成 tag `gtags --gtagslabel ctags`
    - 用法

        将光标移动到某个定义出,执行 :Gtags 即可查看定义, 执行 :Gtags -r 即可查看引用.

    若要自动更新 gtags, 可以在 ~/.vimrc 中设置如下选项:
        let Gtags_Auto_Update = 1
