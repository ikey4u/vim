---
Title: vim 脚本编程
Date: 2019-01-15
Author: bugnofree
---

# 基本语法

- 标量
        let name = "Damian"
        let height = 165
- 列表
        let interests = [ 'Cinema', 'Literature', 'World Domination', 101 ]
- 字典
        let phone     = { 'cell':5551017346, 'home':5558038728, 'work':'?' }
- 变量域
        g:varname/Global
        s:varname/Script
        w:varname/Window
        t:varname/Tab
        b:varname/Buffer
        l:varname/The variable is local to the current function
        a:varname/The variable is a parameter of the current function
        v:varname/The variable is one that Vim predefines
    默认情况下, 一个变量如果在一个函数内部, 那么则是 a:varname 类型的,
    如果不在函数内部, 那么则默认是全局变量.

- 变量赋值

    通过 set 设置的选项也可以通过 let 来设置, 使用方法为: let &{option} = {expr}.
    然而一个异常是 pythonthreedll 选项, 你不能通过上述语法来设置,
    vim 手册说是为了安全考虑.

- 内置变量

    除了用户定义的变量, vim 也提供了许多内置变量, 这些变量可以通过 & 符号来访问
        &varname	: 一个 vim 选项, 默认是访问全局类型的变量
        &l:varname	: 局部
        &g:varname	: 全局
        @varname	: vim 寄存器
        $varname	: 环境变量

- 字典

    定义一个字典

        let colors = {
        \ "apple": "red",
        \ "banana": "yellow"
        }

    访问字典元素

        echo colors["a"]
        echo get(colors, "apple")

    注意后一种形式, 如果键不存在, 则不会报错.

    遍历一个字典的方法如下

        for key in keys(mydict)
            echo key . ': ' . mydict(key)
        endfor

    删除字典的一个键

        remove(colors, "apple")

    其他操作

        if has_key(dict, 'foo')
        if empty(dict)
        keys(dict)
        len(dict)
        max(dict)
        min(dict)
        count(dict, 'x')
        string(dict)

- 比较

    通过 :h expr-<what> 来获取帮助. 比如 :h expr-== 可以获取如下帮助

        use 'ignorecase'    match case	   ignore case ~
        equal			==		==#		==?
        not equal		!=		!=#		!=?
        greater than		>		>#		>?
        greater than or equal	>=		>=#		>=?
        smaller than		<		<#		<?
        smaller than or equal	<=		<=#		<=?
        regexp matches		=~		=~#		=~?
        regexp doesn't match	!~		!~#		!~?
        same instance		is		is#		is?
        different instance	isnot		isnot#		isnot?

        Examples:
        "abc" ==# "Abc"	  evaluates to 0
        "abc" ==? "Abc"	  evaluates to 1
        "abc" == "Abc"	  evaluates to 1 if 'ignorecase' is set, 0 otherwise

- 表达式

    常见的表达式有如下几种, 参考模仿即可

    - let var=expr let var+=expr let var-=expr let var.=expr

    - 三元操作符号

            bool?expr-if-true:expr-if-false

    - 逻辑运算

            bool||bool bool&&bool !bool

    - 算术运算

            expr==expr expr!=expr expr>expr expr>=expr expr<expr expr<=expr
            num+num num-num
            num*num num/num num%num
            +num -num

    - 字符串拼接

            "hello"."world" => "helloworld"
            10 . "foo" => "10foo"

            let s = "hello"
            let s .= "world"
            echom s => "helloworld"

- 控制流

    -  for 循环

            for i in [1, 2, 3, 4]
              let c += i
            endfor

    - while 循环

            while c <= 4
              let total += c
              let c += 1
            endwhile
    - if 语句

            if "something"
                echom "INDEED"
            endif

            if 0
                echom "if"
            elseif "nope!"
                echom "elseif"
            else
                echom "finally!"
            endif

- 输入输出

    在 vim 启动已经 `:messages` 中显示消息

        echom total

    在脚本里面加入错误信息所在打文件和行号是一个不错的选择, 如下所示

        let s:scriptpath = expand("<sfile>:p")
        echomsg s:scriptpath . "." . expand("<slnum>") . " => No fcitx-remote is found!"

    其中 `s:` 开头打变量是脚本(script)变量, expand 里面用 <sfile> 表示 source 打当前文件,
    然后 `:p` 来展开完整路径, 这样打我们就得到了当前 source 打文件路径,
    然后我们还需要获取当前行号, 可以使用 <slnum> 得到.

    expand 功能很强大, 可以使用 `:h expand` 来查看.

- 函数
    - 获取函数列表
            :help function-list
    - expand 函数

        假设当前文件为 ~/notes/python.txt

            :p		expand to full path
            :h		head (last path component removed)
            :t		tail (last path component only), 比如 expand("%:t") 得到 python.txt
            :r		root (one extension removed)
            :e		extension only
            let @a=expand("%:p") ==> 寄存器 a 的值为文件的完整路径

        expand 也可以用于展开环境变量, 如 echo expand("$HOME") 将会输出 home 目录.

    - split

        将一个表达式按照指定字符进行分割, 得到一个列表.

            let colors = split(a:color, '\.')

        这里注意点需要进行转义.

    - 定义函数,函数格式大致如下

            function! TheFunc()
                function body ...
            endfunction

        函数名称以 `function!` 开始, 其后接着函数名称(函数名首字母必须为大写),
        最后以 `endfunction` 结束, 调用函数使用 `:call TheFunc()`.

        一个样例函数如下:

            nnoremap <F11> :call MaxWindows(1, 23, 71, 239)<CR>
            function! MaxWindows(x, y, l, c)
                exec "winpos ".a:x." ".a:y
                exec "set lines=".a:l
                exec "set columns=".a:c
            endfunction

        需要用 a 前缀来表示在作用域里面寻找变量,
        set 命令在函数体内无法直接工作, 需要借助 exec 来执行.

- 异常处理(try/catch)

        try
            command ...
        catch [pattern]
            [command]
        endtry

# 编程常用

- source 命令

    更新一个配置文件用, 如果更新打文件路径是变量和字符串混合, 则需要使用 exec

        exec "source " . g:home . "/user.vim"

    注意, 仅仅使用 source 命令, 比如下面这个是不行的

        source g:home . "/user.vim"

# 正则表达式

替换语法如下

    :range s[ubstitute]/pattern/string/cgiI
        For each line in the range replace a match of the pattern
        with the string where:
        c Confirm each substitution
        g Replace all occurrences in the line (without g - only first).
        i Ignore case for the pattern.
        I Don't ignore case for the pattern.
    line range:
        number an absolute line number
        .  the current line
        $ the last line in the file
        % the whole file. The same as 1,$
    pattern:
        .  any character except new line
        \s whitespace character
        \S non-whitespace character
        \d digit
        \D non-digit
        \x hex digit
        \X non-hex digit
        \o octal digit
        \O non-octal digit
        \h head of word character (a,b,c...z,A,B,C...Z and _)
        \H non-head of word character
        \p printable character
        \P like \p, but excluding digits
        \w word character
        \W non-word character
        \a alphabetic character
        \A non-alphabetic character
        \l lowercase character
        \L non-lowercase character
        \u uppercase character
        \U non-uppercase character
    Quantifier
        * matches 0 or more of the preceding characters, ranges or
          metacharacters .* matches everything including empty line
        \+ matches 1 or more of the preceding characters...
        \= matches 0 or 1 more of the preceding characters...
        \{n,m} matches from n to m of the preceding characters...
        \{n} matches exactly n times of the preceding characters...
        \{,m} matches at most m (from 0 to m) of the preceding characters...
        \{n,} matches at least n of of the preceding characters...
            where n and m are positive integers (>0)

    Grouping and Backreferences
        & the whole matched pattern
        \L the following characters are made lowercase
        \0 the whole matched pattern
        \U the following characters are made uppercase
        \1 the matched pattern in the first pair of \(\)
        \E end of \U and \L
        \2 the matched pattern in the second pair of \(\)
        \e end of \U and \L
        ...  ...
        \r split line in two at this point
        \9 the matched pattern in the ninth pair of \(\)
        \l next character made lowercase
        ~ the previous substitute string
        \u next character made uppercase
    Alternations
        Using "\|" you can combine several expressions into one which
        matches any of its components. The first one matched will be
        used.
        \(Date:\|Subject:\|From:\)
        比如搜索逗号后者句号,可以使用:/\(,\|\.\)
        在逗号或者句号后面加上一个空格,每个都手动进行确认.
        :.,$s/\(,\|\.\)/\1 /gc
        这里替换范围是从当前行到文件末尾,并对捕获组进行引用,也就是
        捕获到逗号或者句号,然后将其加上一个空格后替换.  g表示对每一
        行中所有的匹配都进行替换,c表示每一个匹配都进行逐一确认.
参考:
- @[http://vimregex.com/]
- @[https://github.com/johngrib/vimscript-cheatsheet]

# python 接口

自带文档看一下即可, 查看命令 `:h python-vim`.

一般的在 vim 里面用 python 写一个函数的方法如下

    function! FuncName()
    python >> EOF
    import vim
    // codes ...
    EOF
    endfunction

里面的 vim 模块是 python 和 vim 之间进行交互的唯一模块.
用法示例

- 执行 vim 命令

        vim.command(cmd)

-  窗口与鼠标

    索引为 n 的窗口
        w = vim.windows[n]

    当前窗口
        cw = vim.current.window

    其他
        w.height = lines		# sets the window height
        w.cursor = (row, col)	# sets the window cursor position
        pos = w.cursor		# gets a tuple (row, col)

- buffer

    索引为 n 的 buffer
        b = vim.buffers[n]

    当前 buffer
        cb = vim.current.buffer

    buffer 的名称
        name = b.name		# gets the buffer file name

    获取第 n 行
        line = b[n]			# gets a line from the buffer

    其他常用操作
        lines = b[n:m]		# gets a list of lines
        num = len(b)		# gets the number of lines
        b[n] = str			# sets a line in the buffer
        b[n:m] = [str1, str2, str3]	# sets a number of lines at once
        del b[n]			# deletes a line
        del b[n:m]			# deletes a number of lines

# 转 pdf 插件编写

这个插件借助 wkhtmltopdf 工具将 html 转换为 pdf,
需要安装该工具并添加到环境变量中, 具体可以参考如下链接

- @[https://github.com/wkhtmltopdf/wkhtmltopdf/releases]
- @[https://wkhtmltopdf.org/usage/wkhtmltopdf.txt]

插件源码如下

    "If user do not have absolute path of wkhtmltopdf set,
    "then we regard it as in PATH environment
    if exists("g:html2pdf_exepath") == 0
        let g:html2pdf_exepath = "wkhtmltopdf"
    endif

    function! TOpdf()
        let g:file_name = expand('%:t:r')
        TOhtml
        wq! /tmp/tmp.html
        call system(g:html2pdf_exepath .
                    \" --header-center " .
                    \g:file_name .
                    \" --header-spacing 3 " .
                    \" /tmp/tmp.html " .
                    \"PDF@".g:file_name.".pdf")
        call system("rm -rf /tmp/tmp.html")
    endfunction

    command! TOpdf call TOpdf()

使用命令 `:TOpdf` 即可将当前文件转换为 PDF, 输出的文件名称由前缀 `PDF@` 和当前文件名组成,
PDF 的标题为当前文件名称(不带后缀).

更多语法参考 https://devhints.io/vimscript
