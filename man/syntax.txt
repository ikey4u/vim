# synatx

标量:
let name = "Damian"
let height = 165
列表:
let interests = [ 'Cinema', 'Literature', 'World Domination', 101 ]
字典:
let phone     = { 'cell':5551017346, 'home':5558038728, 'work':'?' }
变量域:
g:varname/Global
s:varname/Script
w:varname/Window
t:varname/Tab
b:varname/Buffer
l:varname/The variable is local to the current function
a:varname/The variable is a parameter of the current function
v:varname/The variable is one that Vim predefines
默认情况下, 一个变量如果在一个函数内部, 那么则是 a:varname 类型的,
如果不在函数内部, 那么则默认是全局变量.

通过 set 设置的选项也可以通过 let 来设置, 使用方法为: let &{option} = {expr}.
然而一个异常是 pythonthreedll 选项, 你不能通过上述语法来设置, vim 手册说是为了安全考虑.

除了用户定义的变量, vim 也提供了许多内置变量, 这些变量可以通过 & 符号来访问
&varname	: 一个 vim 选项, 默认是访问全局类型的变量
&l:varname	: 局部
&g:varname	: 全局
@varname	: vim 寄存器
$varname	: 环境变量

表达式
let var=expr
let var+=expr
let var-=expr
let var.=expr
bool?expr-if-true:expr-if-false
bool||bool
bool&&bool
expr==expr
expr!=expr
expr>expr
expr>=expr
expr<expr
expr<=expr
num+num
num-num
str.str
num*num
num/num
num%num
+num
-num
!bool

控制流

for i in [1, 2, 3, 4]
  let c += i
endfor

while c <= 4
  let total += c
  let c += 1
endwhile

if "something"
    echom "INDEED"
endif

if 0
    echom "if"
elseif "nope!"
    echom "elseif"
else
    echom "finally!"
endif

输出消息
echom total

函数列表
:help function-list

expand 函数
假设当前文件为 ~/notes/python.txt
:p		expand to full path
:h		head (last path component removed)
:t		tail (last path component only), 比如 expand("%:t") 得到 python.txt
:r		root (one extension removed)
:e		extension only
let @a=expand("%:p") ==> 寄存器 a 的值为文件的完整路径

>>> 正则表达式搜索替换
keywords:regular expression/regexp/正则表达式/替换/搜索

替换语法:
:range s[ubstitute]/pattern/string/cgiI
    For each line in the range replace a match of the pattern
    with the string where:
    c Confirm each substitution
    g Replace all occurrences in the line (without g - only first).
    i Ignore case for the pattern.
    I Don't ignore case for the pattern.
line range:
    number an absolute line number
    .  the current line
    $ the last line in the file
    % the whole file. The same as 1,$
pattern:
    .  any character except new line
    \s whitespace character
    \S non-whitespace character
    \d digit
    \D non-digit
    \x hex digit
    \X non-hex digit
    \o octal digit
    \O non-octal digit
    \h head of word character (a,b,c...z,A,B,C...Z and _)
    \H non-head of word character
    \p printable character
    \P like \p, but excluding digits
    \w word character
    \W non-word character
    \a alphabetic character
    \A non-alphabetic character
    \l lowercase character
    \L non-lowercase character
    \u uppercase character
    \U non-uppercase character
Quantifier
    * matches 0 or more of the preceding characters, ranges or
      metacharacters .* matches everything including empty line
    \+ matches 1 or more of the preceding characters...
    \= matches 0 or 1 more of the preceding characters...
    \{n,m} matches from n to m of the preceding characters...
    \{n} matches exactly n times of the preceding characters...
    \{,m} matches at most m (from 0 to m) of the preceding characters...
    \{n,} matches at least n of of the preceding characters...
        where n and m are positive integers (>0)

Grouping and Backreferences
    & the whole matched pattern
    \L the following characters are made lowercase
    \0 the whole matched pattern
    \U the following characters are made uppercase
    \1 the matched pattern in the first pair of \(\)
    \E end of \U and \L
    \2 the matched pattern in the second pair of \(\)
    \e end of \U and \L
    ...  ...
    \r split line in two at this point
    \9 the matched pattern in the ninth pair of \(\)
    \l next character made lowercase
    ~ the previous substitute string
    \u next character made uppercase
Alternations
    Using "\|" you can combine several expressions into one which
    matches any of its components. The first one matched will be
    used.
    \(Date:\|Subject:\|From:\)
    比如搜索逗号后者句号,可以使用:/\(,\|\.\)
    在逗号或者句号后面加上一个空格,每个都手动进行确认.
    :.,$s/\(,\|\.\)/\1 /gc
    这里替换范围是从当前行到文件末尾,并对捕获组进行引用,也就是
    捕获到逗号或者句号,然后将其加上一个空格后替换.  g表示对每一
    行中所有的匹配都进行替换,c表示每一个匹配都进行逐一确认.

reference:http://vimregex.com/
https://github.com/johngrib/vimscript-cheatsheet

[vim 函数]
定义一个函数,函数格式大致如下:
function! TheFunc()
    function body ...
endfunction
函数名称以 function! 开始,其后接着函数名称,函数名首字母必须为大写.
函数以 endfunction 结束.
调用函数可以用:call TheFunc()
样例函数:
nnoremap <F11> :call MaxWindows(1, 23, 71, 239)<CR>
function! MaxWindows(x, y, l, c)
    exec "winpos ".a:x." ".a:y
    exec "set lines=".a:l
    exec "set columns=".a:c
endfunction
需要用 a 前缀来表示在作用域里面寻找变量.
set 命令在函数体内无法直接工作, 需要借助 exec 来执行.

exec vs call
exec 将一个字符串当做命令执行.
而 call 则是调用一个函数.

[异常处理(try/catch)]
try
    command ...
catch [pattern]
    [command]
endtry

